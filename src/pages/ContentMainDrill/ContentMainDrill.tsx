/**
 * ContentMainDrill Component
 * Detail page for editing dropdown elements (Page 4.1)
 * Following master-detail pattern from ContentMain (Page 4)
 * 
 * Business Logic:
 * - Receives dropdown element ID from ContentMain page
 * - Allows editing dropdown options with multilingual support (RU/HEB)
 * - Supports drag & drop reordering
 * - CRUD operations on dropdown options
 * 
 * Navigation Flow:
 * ContentMain (Page 4) ‚Üí ContentMainDrill (Page 4.1) ‚Üí ContentMain (updated)
 * 
 * @version 1.0.0
 * @since 2025-01-20
 */

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Breadcrumb } from '../Chat/ContentManagement/components/Breadcrumb';
import { useNavigation } from '../../contexts/NavigationContext';
import './ContentMainDrill.css';

interface DropdownOption {
  id: string;
  order: number;
  titleRu: string;
  titleHe: string;
}

interface DropdownAction {
  id: string;
  actionNumber: number;
  titleRu: string;
  titleHe: string;
  lastModified: string;
  options: DropdownOption[];
}

const ContentMainDrill: React.FC = () => {
  const { actionId } = useParams<{ actionId: string }>();
  const navigate = useNavigate();
  const { setCurrentSubmenu } = useNavigation();
  
  // States
  const [isLoading, setIsLoading] = useState(false);
  const [dropdownData, setDropdownData] = useState<DropdownAction | null>(null);
  const [hasChanges, setHasChanges] = useState(false);

  // Set navigation context
  useEffect(() => {
    setCurrentSubmenu('content-main', '–ì–ª–∞–≤–Ω–∞—è');
  }, [setCurrentSubmenu]);

  // Mock data for development
  useEffect(() => {
    // Simulate loading dropdown data
    setIsLoading(true);
    setTimeout(() => {
      setDropdownData({
        id: actionId || '1',
        actionNumber: 3,
        titleRu: '–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞',
        titleHe: '◊û◊ß◊ï◊® ◊î◊õ◊†◊°◊î ◊¢◊ô◊ß◊®◊ô',
        lastModified: '01.08.2023 | 15:03',
        options: [
          { id: '1', order: 1, titleRu: '–ù–∞–µ–º–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫', titleHe: '◊©◊õ◊ô◊®' },
          { id: '2', order: 2, titleRu: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', titleHe: '◊¢◊¶◊û◊ê◊ô' },
          { id: '3', order: 3, titleRu: '–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞', titleHe: '◊ë◊¢◊ú ◊¢◊°◊ß' },
          { id: '4', order: 4, titleRu: '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä', titleHe: '◊§◊†◊°◊ô◊ï◊†◊®' }
        ]
      });
      setIsLoading(false);
    }, 500);
  }, [actionId]);

  // Handlers
  const handleBack = () => {
    if (hasChanges) {
      const confirm = window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?');
      if (!confirm) return;
    }
    navigate('/content/main');
  };

  const handleSaveAndPublish = () => {
    // TODO: Implement save logic
    console.log('Saving and publishing changes...');
    setHasChanges(false);
    navigate('/content/main');
  };

  const handleAddOption = () => {
    console.log('Adding new option...');
    setHasChanges(true);
  };

  const handleEditOption = (optionId: string) => {
    console.log('Editing option:', optionId);
    setHasChanges(true);
  };

  const handleDeleteOption = (optionId: string) => {
    console.log('Deleting option:', optionId);
    setHasChanges(true);
  };

  const handleDragStart = (e: React.DragEvent, optionId: string) => {
    e.dataTransfer.setData('optionId', optionId);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent, targetId: string) => {
    e.preventDefault();
    const sourceId = e.dataTransfer.getData('optionId');
    console.log('Moving option:', sourceId, 'to position of:', targetId);
    setHasChanges(true);
  };

  if (isLoading) {
    return (
      <div className="content-main-drill loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
      </div>
    );
  }

  if (!dropdownData) {
    return (
      <div className="content-main-drill error">
        <p>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
        <button onClick={handleBack}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</button>
      </div>
    );
  }

  return (
    <div className="content-main-drill">
      {/* Breadcrumb Navigation */}
      <div className="breadcrumb-section">
        <Breadcrumb
          items={[
            { label: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞', href: '/content-management' },
            { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/content/main' },
            { label: `–î–µ–π—Å—Ç–≤–∏–µ ‚Ññ${dropdownData.actionNumber}`, href: '#', isActive: true }
          ]}
        />
      </div>

      {/* Page Header */}
      <div className="page-header">
        <h1>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dropdown</h1>
        <p className="page-subtitle">–î–µ–π—Å—Ç–≤–∏–µ ‚Ññ{dropdownData.actionNumber} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {dropdownData.lastModified}</p>
      </div>

      {/* Action Headers Section */}
      <div className="action-headers-section">
        <h2>–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π</h2>
        <div className="headers-grid">
          <div className="header-input">
            <label>RU</label>
            <input 
              type="text" 
              value={dropdownData.titleRu}
              onChange={(e) => {
                setDropdownData({ ...dropdownData, titleRu: e.target.value });
                setHasChanges(true);
              }}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"
            />
          </div>
          <div className="header-input">
            <label>HEB</label>
            <input 
              type="text" 
              value={dropdownData.titleHe}
              onChange={(e) => {
                setDropdownData({ ...dropdownData, titleHe: e.target.value });
                setHasChanges(true);
              }}
              placeholder="◊©◊ù ◊ë◊¢◊ë◊®◊ô◊™"
              dir="rtl"
            />
          </div>
        </div>
      </div>

      {/* Options Section */}
      <div className="options-section">
        <div className="section-header">
          <h2>–û–ø—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤</h2>
          <button className="add-option-btn" onClick={handleAddOption}>
            + –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
          </button>
        </div>

        <div className="options-list">
          {dropdownData.options.map((option) => (
            <div 
              key={option.id} 
              className="option-item"
              draggable
              onDragStart={(e) => handleDragStart(e, option.id)}
              onDragOver={handleDragOver}
              onDrop={(e) => handleDrop(e, option.id)}
            >
              <div className="drag-handle">
                <span className="drag-icon">‚ãÆ‚ãÆ</span>
              </div>
              <div className="option-number">{option.order}</div>
              <div className="option-content">
                <input 
                  type="text" 
                  value={option.titleRu}
                  onChange={() => {
                    // Update option logic here
                    setHasChanges(true);
                  }}
                  placeholder="RU"
                />
                <input 
                  type="text" 
                  value={option.titleHe}
                  onChange={() => {
                    // Update option logic here
                    setHasChanges(true);
                  }}
                  placeholder="HEB"
                  dir="rtl"
                />
              </div>
              <div className="option-actions">
                <button 
                  className="edit-btn" 
                  onClick={() => handleEditOption(option.id)}
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                >
                  ‚úèÔ∏è
                </button>
                <button 
                  className="delete-btn" 
                  onClick={() => handleDeleteOption(option.id)}
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  üóëÔ∏è
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="action-buttons">
        <button className="back-btn" onClick={handleBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <button 
          className="save-publish-btn" 
          onClick={handleSaveAndPublish}
          disabled={!hasChanges}
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        </button>
      </div>
    </div>
  );
};

export default ContentMainDrill;