import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { apiService } from '../../services/api';
import './ContentMortgageEdit.css';

interface MortgageItem {
  id: string;
  content_key: string;
  component_type: string;
  category: string;
  screen_location: string;
  description: string;
  is_active: boolean;
  translations: {
    ru: string;
    he: string;
    en: string;
  };
  last_modified: string;
}

const ContentMortgageEdit: React.FC = () => {
  const { itemId } = useParams<{ itemId: string }>();
  const navigate = useNavigate();
  
  const [mortgageItem, setMortgageItem] = useState<MortgageItem | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  
  // Form states
  const [translations, setTranslations] = useState({
    ru: '',
    he: '',
    en: ''
  });

  useEffect(() => {
    fetchMortgageItem();
  }, [itemId]);

  const fetchMortgageItem = async () => {
    if (!itemId) return;
    
    try {
      setLoading(true);
      setError(null);
      
      // Fetch all mortgage items and find the one we need
      const response = await apiService.getMortgageContent();
      
      if (response.success && response.data?.mortgage_content) {
        const item = response.data.mortgage_content.find((i: any) => i.id === itemId);
        
        if (item) {
          setMortgageItem(item);
          setTranslations({
            ru: item.translations.ru || '',
            he: item.translations.he || '',
            en: item.translations.en || ''
          });
        } else {
          setError('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      }
    } catch (err) {
      console.error('Error fetching mortgage item:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const handleTranslationChange = (lang: 'ru' | 'he' | 'en', value: string) => {
    setTranslations(prev => ({
      ...prev,
      [lang]: value
    }));
  };

  const handleSave = async () => {
    if (!mortgageItem) return;
    
    try {
      setSaving(true);
      setError(null);
      setSuccessMessage(null);
      
      // Save each translation
      const promises = Object.entries(translations).map(([lang, value]) => 
        apiService.updateContentTranslation(mortgageItem.id, lang, value)
      );
      
      const results = await Promise.all(promises);
      
      // Check if all saves were successful
      const allSuccessful = results.every(result => result.success);
      
      if (allSuccessful) {
        setSuccessMessage('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        
        // Clear the cache to ensure fresh data
        apiService.clearContentCache();
        
        // Refresh the item data
        await fetchMortgageItem();
        
        // Navigate back after a short delay
        setTimeout(() => {
          navigate('/content/mortgage');
        }, 1500);
      } else {
        setError('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
      }
    } catch (err) {
      console.error('Error saving translations:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    navigate('/content/mortgage');
  };

  const getComponentTypeLabel = (type: string) => {
    const labels: Record<string, string> = {
      'text': '–¢–µ–∫—Å—Ç',
      'label': '–ú–µ—Ç–∫–∞',
      'button': '–ö–Ω–æ–ø–∫–∞',
      'placeholder': '–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä',
      'option': '–û–ø—Ü–∏—è',
      'input': '–ü–æ–ª–µ –≤–≤–æ–¥–∞',
      'dropdown': '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫'
    };
    return labels[type] || type;
  };

  const getCategoryLabel = (category: string) => {
    const labels: Record<string, string> = {
      'form': '–§–æ—Ä–º–∞',
      'header': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
      'progress': '–ü—Ä–æ–≥—Ä–µ—Å—Å',
      'test': '–¢–µ—Å—Ç'
    };
    return labels[category] || category;
  };

  if (loading) {
    return (
      <div className="mortgage-edit-container">
        <div className="loading-state">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  if (error && !mortgageItem) {
    return (
      <div className="mortgage-edit-container">
        <div className="error-state">
          <p>{error}</p>
          <button onClick={handleCancel} className="btn-secondary">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          </button>
        </div>
      </div>
    );
  }

  if (!mortgageItem) {
    return (
      <div className="mortgage-edit-container">
        <div className="error-state">–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
      </div>
    );
  }

  return (
    <div className="mortgage-edit-container">
      {/* Header */}
      <div className="edit-header">
        <h1>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ø–æ—Ç–µ–∫–∏</h1>
        <div className="breadcrumb">
          <span onClick={() => navigate('/content/mortgage')} className="breadcrumb-link">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É
          </span>
          <span className="breadcrumb-separator">‚Ä∫</span>
          <span className="breadcrumb-current">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
        </div>
      </div>

      {/* Messages */}
      {error && (
        <div className="message message-error">
          {error}
        </div>
      )}
      
      {successMessage && (
        <div className="message message-success">
          {successMessage}
        </div>
      )}

      {/* Item Info */}
      <div className="item-info">
        <div className="info-grid">
          <div className="info-item">
            <label>–ö–ª—é—á –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</label>
            <span>{mortgageItem.content_key}</span>
          </div>
          <div className="info-item">
            <label>–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:</label>
            <span className="component-type">{getComponentTypeLabel(mortgageItem.component_type)}</span>
          </div>
          <div className="info-item">
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
            <span>{getCategoryLabel(mortgageItem.category)}</span>
          </div>
          <div className="info-item">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <span>{mortgageItem.description}</span>
          </div>
          <div className="info-item">
            <label>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</label>
            <span>
              {new Date(mortgageItem.last_modified).toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}
            </span>
          </div>
          <div className="info-item">
            <label>–°—Ç–∞—Ç—É—Å:</label>
            <span className={`status ${mortgageItem.is_active ? 'active' : 'inactive'}`}>
              {mortgageItem.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            </span>
          </div>
        </div>
      </div>

      {/* Translation Form */}
      <div className="translation-form">
        <h2>–ü–µ—Ä–µ–≤–æ–¥—ã</h2>
        
        <div className="translation-grid">
          {/* Russian */}
          <div className="translation-item">
            <div className="translation-header">
              <span className="language-flag">üá∑üá∫</span>
              <label>–†—É—Å—Å–∫–∏–π</label>
            </div>
            <textarea
              value={translations.ru}
              onChange={(e) => handleTranslationChange('ru', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º"
              className="translation-input"
              rows={3}
            />
          </div>

          {/* Hebrew */}
          <div className="translation-item">
            <div className="translation-header">
              <span className="language-flag">üáÆüá±</span>
              <label>–ò–≤—Ä–∏—Ç</label>
            </div>
            <textarea
              value={translations.he}
              onChange={(e) => handleTranslationChange('he', e.target.value)}
              placeholder="◊î◊ñ◊ü ◊ò◊ß◊°◊ò ◊ë◊¢◊ë◊®◊ô◊™"
              className="translation-input"
              dir="rtl"
              rows={3}
            />
          </div>

          {/* English */}
          <div className="translation-item">
            <div className="translation-header">
              <span className="language-flag">üá¨üáß</span>
              <label>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</label>
            </div>
            <textarea
              value={translations.en}
              onChange={(e) => handleTranslationChange('en', e.target.value)}
              placeholder="Enter text in English"
              className="translation-input"
              rows={3}
            />
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="edit-actions">
        <button 
          onClick={handleCancel} 
          className="btn-secondary"
          disabled={saving}
        >
          –û—Ç–º–µ–Ω–∞
        </button>
        <button 
          onClick={handleSave} 
          className="btn-primary"
          disabled={saving || (!translations.ru && !translations.he && !translations.en)}
        >
          {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
        </button>
      </div>
    </div>
  );
};

export default ContentMortgageEdit;