import React from 'react';
import { useAuth, UserRole } from '../../contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: UserRole;
  requiredPermission?: {
    action: string;
    resource: string;
  };
  fallback?: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requiredRole,
  requiredPermission,
  fallback
}) => {
  const { user, hasPermission, isRole } = useAuth();

  // If no user is logged in
  if (!user) {
    return (
      <div className="access-denied">
        <div className="error-card">
          <h2>üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
          <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</p>
        </div>
      </div>
    );
  }

  // Check role requirement
  if (requiredRole && !isRole(requiredRole)) {
    return fallback || (
      <div className="access-denied">
        <div className="error-card">
          <h2>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</p>
          <div className="access-info">
            <p><strong>–í–∞—à–∞ —Ä–æ–ª—å:</strong> {getRoleDisplayName(user.role)}</p>
            <p><strong>–¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å:</strong> {getRoleDisplayName(requiredRole)}</p>
          </div>
        </div>
      </div>
    );
  }

  // Check permission requirement
  if (requiredPermission && !hasPermission(requiredPermission.action, requiredPermission.resource)) {
    return fallback || (
      <div className="access-denied">
        <div className="error-card">
          <h2>üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</h2>
          <p>–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.</p>
          <div className="access-info">
            <p><strong>–¢—Ä–µ–±—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</strong> {requiredPermission.action} –¥–ª—è {requiredPermission.resource}</p>
          </div>
        </div>
      </div>
    );
  }

  return <>{children}</>;
};

// Helper function to get display names for roles
const getRoleDisplayName = (role: UserRole): string => {
  const roleNames: Record<UserRole, string> = {
    'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    'administration': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'sales-manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
    'content-manager': '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä',
    'brokers': '–ë—Ä–æ–∫–µ—Ä',
    'bank-employee': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –±–∞–Ω–∫–∞'
  };
  return roleNames[role] || role;
};

export default ProtectedRoute; 